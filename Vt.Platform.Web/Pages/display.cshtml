@page
@model Vt.Platform.Web.Pages.displayModel
@{
    ViewData["Title"] = "display";
}
    
        
<style>
    input {
        margin-right: 5px
    }

    p {
        display: block
    }
    
   


    
</style>
<div id="mobileToggle">
    <input type="button" id="mobevent" value="Event Details" />
    <input type="button" id="mobpart" value="Who's Coming?" />
</div>
<div id="eventDisplay">
    <div class="row">
        <div class="col-md-6" id="evdis">
            

                <div>
                    Organizer
                    <p>{{organizerName}}</p>
                </div>
                <div>
                    Event
                    <p>{{summary}}</p>
                </div>
                <div>
                    Event Date
                    <p>{{eventDate}}</p>

                    Number of Participants Requested
                    <p>{{numberOfParticipantsRequested}}</p>

                    Event Details
                    <p>{{details}}</p>
                </div>
                <div>
                    Location
                    <p>{{location}}</p>
                </div>

        </div>
        
            <div class="col-md-6" id="partdis" >
                <div>
                    Who's Coming?

                </div>
                <div>
                    <input type="button" id="yes" value="I can come" />
                    <input type="button" id="maybe" value="maybe" />
                    <input type="button" id="yes" value="can't come" />
                </div>

                <div>
                    <ul>
                        <li v-for="people in peoples"> {{people.name}}</li>
                    </ul>
                </div>

            </div>

    </div>

</div>

@section Scripts {
    <script>
        var participants = [];
        var party = [];

        $("#mobpart").on("click", function () {

            console.log("part click");
            $("#evdis").hide();
            $("#partdis").show();


        });
        $("#mobevent").on("click", function () {

            console.log("Ev click");
            $("#partdis").hide();
            $("#evdis").show();

        });

        $(function() {
            loadData();


            //var self = this;

            function loadData() {
                var urlload = getAllUrlParams(this.url).eventcode;
                var urlCode = urlload.toUpperCase();
                //var urlCode = urlParams[0];
                console.log(urlCode);
                    $.ajax({
                        url: "http://localhost:7071/api/GetEvent?eventCode=" + urlCode,
                        dataType: 'json',
                        contentType: 'application/json',
                        method: 'GET'
                    }).done(function (responseJSON, status, xhr) {

                            eventDisplay.organizerName = responseJSON.organizerName;
                            eventDisplay.summary = responseJSON.summary;
                            eventDisplay.eventDate = responseJSON.eventDate;
                            eventDisplay.numberOfParticipantsRequested = responseJSON.numberOfParticipantsRequested;
                            eventDisplay.details = responseJSON.details;
                            eventDisplay.location = responseJSON.location;

                    }).fail(function(xhr,status,error) {
                        console.log("fail", xhr, status, error);
                        alert("There was an error retrieving the data");
                    });

                };
            function getAllUrlParams(url) {

            // get query string from url (optional) or window
            var queryString = url ? url.split('?')[1] : window.location.search.slice(1);

            // we'll store the parameters here
            var obj = {};

            // if query string exists
            if (queryString) {

                // stuff after # is not part of query string, so get rid of it
                queryString = queryString.split('#')[0];

                // split our query string into its component parts
                var arr = queryString.split('&');

                for (var i = 0; i < arr.length; i++) {
                    // separate the keys and the values
                    var a = arr[i].split('=');

                    // set parameter name and value (use 'true' if empty)
                    var paramName = a[0];
                    var paramValue = typeof (a[1]) === 'undefined' ? true : a[1];

                    // (optional) keep case consistent
                    paramName = paramName.toLowerCase();
                    if (typeof paramValue === 'string') paramValue = paramValue.toLowerCase();

                    // if the paramName ends with square brackets, e.g. colors[] or colors[2]
                    if (paramName.match(/\[(\d+)?\]$/)) {

                        // create key if it doesn't exist
                        var key = paramName.replace(/\[(\d+)?\]/, '');
                        if (!obj[key]) obj[key] = [];

                        // if it's an indexed array e.g. colors[2]
                        if (paramName.match(/\[\d+\]$/)) {
                            // get the index value and add the entry at the appropriate position
                            var index = /\[(\d+)\]/.exec(paramName)[1];
                            obj[key][index] = paramValue;
                        } else {
                            // otherwise add the value to the end of the array
                            obj[key].push(paramValue);
                        }
                    } else {
                        // we're dealing with a string
                        if (!obj[paramName]) {
                            // if it doesn't exist, create property
                            obj[paramName] = paramValue;
                        } else if (obj[paramName] && typeof obj[paramName] === 'string') {
                            // if property does exist and it's a string, convert it to an array
                            obj[paramName] = [obj[paramName]];
                            obj[paramName].push(paramValue);
                        } else {
                            // otherwise add the property
                            obj[paramName].push(paramValue);
                        }
                    }
                }
            }

            return obj;
        }    

        });
        var eventDisplay = new Vue({
            el: '#eventDisplay',
            data: {
                    organizerName: '',
                    summary: '',
                    eventDate: '',
                    numberOfParticipantsRequested: '',
                    details: '',
                    location: '',
                    peoples: []

            },
            mounted: function () {
                var self = this;
                var urlCode = getAllUrlParams(this.url).eventcode;
                function getAllUrlParams(url) {

            // get query string from url (optional) or window
            var queryString = url ? url.split('?')[1] : window.location.search.slice(1);

            // we'll store the parameters here
            var obj = {};

            // if query string exists
            if (queryString) {

                // stuff after # is not part of query string, so get rid of it
                queryString = queryString.split('#')[0];

                // split our query string into its component parts
                var arr = queryString.split('&');

                for (var i = 0; i < arr.length; i++) {
                    // separate the keys and the values
                    var a = arr[i].split('=');

                    // set parameter name and value (use 'true' if empty)
                    var paramName = a[0];
                    var paramValue = typeof (a[1]) === 'undefined' ? true : a[1];

                    // (optional) keep case consistent
                    paramName = paramName.toLowerCase();
                    if (typeof paramValue === 'string') paramValue = paramValue.toLowerCase();

                    // if the paramName ends with square brackets, e.g. colors[] or colors[2]
                    if (paramName.match(/\[(\d+)?\]$/)) {

                        // create key if it doesn't exist
                        var key = paramName.replace(/\[(\d+)?\]/, '');
                        if (!obj[key]) obj[key] = [];

                        // if it's an indexed array e.g. colors[2]
                        if (paramName.match(/\[\d+\]$/)) {
                            // get the index value and add the entry at the appropriate position
                            var index = /\[(\d+)\]/.exec(paramName)[1];
                            obj[key][index] = paramValue;
                        } else {
                            // otherwise add the value to the end of the array
                            obj[key].push(paramValue);
                        }
                    } else {
                        // we're dealing with a string
                        if (!obj[paramName]) {
                            // if it doesn't exist, create property
                            obj[paramName] = paramValue;
                        } else if (obj[paramName] && typeof obj[paramName] === 'string') {
                            // if property does exist and it's a string, convert it to an array
                            obj[paramName] = [obj[paramName]];
                            obj[paramName].push(paramValue);
                        } else {
                            // otherwise add the property
                            obj[paramName].push(paramValue);
                        }
                    }
                }
            }

            return obj;
        }    
                $.ajax({
                        url: "http://localhost:7071/api/GetParticipants?eventCode=" + urlCode,
                        dataType: 'json',
                        contentType: 'application/json',
                        method: 'GET'
                    }).done(function (responseJSON, status, xhr) {
                        $.each(responseJSON.participants, function (index, item) {

                            var newpart = { name: item.name, status: item.status.name };
                            participants.push(newpart);

                        });

                        self.peoples = participants;

                    }).fail(function(xhr,status,error) {
                        console.log("fail", xhr, status, error);
                        alert("There was an error retrieving the data");
                        console.log(urlcode);
                    });
            },
            methods: {
                    makeObject: function () {
                    console.log("clicked");
                    var newEvent = {
                        organizerName: createEvent.orgName,
                        organizerEmail: createEvent.orgEmail,
                        eventDate: createEvent.eventDate,
                        numberOfParticipantsRequested: createEvent.numPart,
                        summary: createEvent.eventSum,
                        details: createEvent.eventDet,
                        location: createEvent.loc
                    }
                    var jsonObject = JSON.stringify(newEvent);
                    console.log(jsonObject);
                }
             }

        })
        /*var participantDisplay = new Vue({
            el: '#participantDisplay',
            data: participants,
            methods: {
                    makeObject: function () {
                    console.log("clicked");
                    var newEvent = {
                        organizerName: createEvent.orgName,
                        organizerEmail: createEvent.orgEmail,
                        eventDate: createEvent.eventDate,
                        numberOfParticipantsRequested: createEvent.numPart,
                        summary: createEvent.eventSum,
                        details: createEvent.eventDet,
                        location: createEvent.loc
                    }
                    var jsonObject = JSON.stringify(newEvent);
                    console.log(jsonObject);
                }
             }

        })*/


    </script>
}