@page
@model Vt.Platform.Web.Pages.editModel
@{
    ViewData["Title"] = "edit";
}
<div id="app">
    <form class="form" v-on:submit.stop.prevent="addEvent">
        <h2>Volteer.us</h2>
        <br />
        <p style="color:red" v-if="isErrorForm">Please resolve the below error</p>
        <div class="row">
            <div class="col-md-6">
                <div>
                    <label for="organizername">Organizer Name</label>
                    <input type="text" class="form-control" id="organizername" placeholder="" v-model="form.organizername" required>
                </div>
                <div>
                    <label for="organizeremail">Organizer Email</label>
                    <input type="text" class="form-control" id="organizeremail" placeholder="" v-model="form.organizeremail" required>
                </div>
                <div>
                    <label for="eventdate">Event Date</label>
                    <input type="datetime-local" class="form-control" id="eventdate" placeholder="" v-model="form.eventdate" required>
                    <p style="color:red" v-if="isEventDateError">Event Date must be in future, can only 90 days out</p>
                </div>
                <div>
                    <label for="noofparticipants">Number of Participants</label>
                    <input type="number" class="form-control" id="noofparticipants" placeholder="" v-model="form.numberofparticipants" required>
                </div>
            </div>




            <div class="col-md-6">
                <div>
                    <label for="eventsummary">Event Summary</label>
                    <input type="text" class="form-control" id="eventsummary" placeholder="" v-model="form.eventsummary" required>
                    <p style="color:red" v-if="form.eventsummary.length >= 140">Summary should be with in 140 characters</p>
                </div>
                <div>
                    <label for="eventdetails">Event Details</label>
                    <textarea class="form-control" v-model="form.eventdetails" id="eventdetails" placeholder=""></textarea>
                    <p style="color:red" v-if="form.eventdetails.length >= 750">Details should be with in 750 characters</p>
                </div>
                <div>
                    <label for="location">Location</label>
                    <input ref="autocomplete" id="eventlocation" v-model="form.eventlocation" placeholder="Search" class="form-control" type="text" />
                </div>
            </div>

        </div>

        <br />
        <div style="text-align:center">
            <button type="submit" class="btn btn-primary">Sumbit Changes</button>
        </div>
    </form>
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Event Confirmation Details</h5>
                </div>
                <div class="modal-body">
                    <div v-if="response.success">
                        <p style="color:limegreen">Successfully Edited Event</p>

                    </div>
                    <div v-else>
                        <p style="color:red">Error in creation. Please try again!</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" v-on:click="refresh()" class="btn btn-primary" data-dismiss="modal">Close</button>

                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script>
        var app = new Vue({
            el: "#app",
            data: {
                // PLACE DATA PROPERTIES HERE - THIS IS THE "MODEL" FOR OUR PROGRAM
                form: {
                    organizername: "",
                    eventsummary: "",
                    organizeremail: "",
                    eventdetails: "",
                    eventdate: "",
                    eventlocation: "",
                    numberofparticipants: "",
                    eventlatitude: "",
                    EventLongitude: "",
                    organizerCode: ""
                },
                show: false,
                isErrorForm: false,
                isEventDateError: false,
                response: {
                    eventCode: "",
                    success: ""
                }
            },
            mounted: function () {
                var self = this;
                self.loadData();

                
                // PERFORM ANY ACTIONS WHEN THE PAGE LOADS HERE - SIMILAR TO JQUERY DOCUMENT.READY
                this.autocomplete = new google.maps.places.Autocomplete(this.$refs.autocomplete);

                this.autocomplete.addListener('place_changed', () => {
                    var place = this.autocomplete.getPlace();
                    this.form.eventlocation = place.formatted_address;
                    this.form.eventlatitude = place.geometry.location.lat();
                    this.form.EventLongitude = place.geometry.location.lng();



                });
            },
            methods: {
                // ADD ANY METHODS (CLICK, SUBMIT EVENTS, ETC.)
                addEvent: function () {
                    var self = this;
                    var urlload = self.getAllUrlParams(this.url).eventcode;
                    var urlCode = urlload.toUpperCase();
                    //DateValidation
                    eventdate = new Date(self.form.eventdate);
                    today = new Date();
                    dateLimit = new Date();
                    dateLimit.setDate(dateLimit.getDate() + 90);
                    if (eventdate < today || eventdate > dateLimit) {
                        this.isErrorForm = true;
                        this.isEventDateError = true;
                    }
                    //Summary,Details Validation
                    else if (self.form.eventsummary.length >= 140 || self.form.eventdetails.length >= 750) {
                        this.isErrorForm = true;
                    }
                    else {
                        this.isEventDateError = false;
                        this.isErrorForm = false;
                        console.log(JSON.stringify(self.form));
                        $.post('http://localhost:7071/api/EditEvent?eventCode=' + urlCode, JSON.stringify(self.form), function (res) {
                            self.response.eventCode = res.EditConfirm;
                            self.response.success = res.metaData.success;
                            $('#myModal').modal('show')
                            self.loadData();
                        })
                    }
                },
                refresh: function () {
                    window.location.reload();
                },
                setVueData: function (data) {

                    var self = this;
                    self.form.organizername = data.organizerName;
                    self.form.eventsummary = data.summary;
                    self.form.organizeremail = data.organizerEmail;
                    self.form.eventdetails = data.details;
                    self.form.eventdate = data.eventDate;
                    self.form.eventlocation = data.location;
                    self.form.numberofparticipants = data.numberOfParticipantsRequested;
                    self.form.eventlatitude = data.eventlatitude;
                    self.form.EventLongitude = data.EventLongitude;
                    self.form.organizerCode = data.organizerCode;

                },
                loadData: function () {
                    var self = this;
                    var urlload = this.getAllUrlParams(this.url).eventcode;
                    var urlCode = urlload.toUpperCase();
                    var urlAdmin = this.getAllUrlParams(this.url).admincode;
                    console.log(urlAdmin);
                    var urlAdminUse = urlAdmin.toLowerCase();
                    console.log(urlAdminUse);
                    var setdata = [];

                    $.ajax({
                        url: "http://localhost:7071/api/GetEvent?eventCode=" + urlCode,
                        dataType: 'json',
                        contentType: 'application/json',
                        method: 'GET'
                    }).done(function (responseJSON, status, xhr) {
                        console.log(responseJSON.organizerCode);
                        if (responseJSON.organizerCode == urlAdminUse) {

                            setdata = responseJSON;

                            self.setVueData(setdata);

                        }
                        else {
                            alert("You are not authorized to edit this event");
                            //window.location.replace("/display?eventcode="+urlCode);
                            
                        }
                        

                    }).fail(function (xhr, status, error) {
                        console.log("fail", xhr, status, error);
                        alert("There was an error retrieving the data");
                    });



                },
                getAllUrlParams: function (url) {

                    // get query string from url (optional) or window
                    var queryString = url ? url.split('?')[1] : window.location.search.slice(1);

                    // we'll store the parameters here
                    var obj = {};

                    // if query string exists
                    if (queryString) {

                        // stuff after # is not part of query string, so get rid of it
                        queryString = queryString.split('#')[0];

                        // split our query string into its component parts
                        var arr = queryString.split('&');

                        for (var i = 0; i < arr.length; i++) {
                            // separate the keys and the values
                            var a = arr[i].split('=');

                            // set parameter name and value (use 'true' if empty)
                            var paramName = a[0];
                            var paramValue = typeof (a[1]) === 'undefined' ? true : a[1];

                            // (optional) keep case consistent
                            paramName = paramName.toLowerCase();
                            if (typeof paramValue === 'string') paramValue = paramValue.toLowerCase();

                            // if the paramName ends with square brackets, e.g. colors[] or colors[2]
                            if (paramName.match(/\[(\d+)?\]$/)) {

                                // create key if it doesn't exist
                                var key = paramName.replace(/\[(\d+)?\]/, '');
                                if (!obj[key]) obj[key] = [];

                                // if it's an indexed array e.g. colors[2]
                                if (paramName.match(/\[\d+\]$/)) {
                                    // get the index value and add the entry at the appropriate position
                                    var index = /\[(\d+)\]/.exec(paramName)[1];
                                    obj[key][index] = paramValue;
                                } else {
                                    // otherwise add the value to the end of the array
                                    obj[key].push(paramValue);
                                }
                            } else {
                                // we're dealing with a string
                                if (!obj[paramName]) {
                                    // if it doesn't exist, create property
                                    obj[paramName] = paramValue;
                                } else if (obj[paramName] && typeof obj[paramName] === 'string') {
                                    // if property does exist and it's a string, convert it to an array
                                    obj[paramName] = [obj[paramName]];
                                    obj[paramName].push(paramValue);
                                } else {
                                    // otherwise add the property
                                    obj[paramName].push(paramValue);
                                }
                            }
                        }
                    }

                    return obj;
                }

            },
            computed: {
                // CREATE ANY CALCULATED PROPERTIES HERE. THEY BEHAVE LIKE READ-ONLY DATA
            }
        });
    </script>

}
